/*! \mainpage QScintilla - a Port to Qt v3 of Scintilla

<h2>Introduction</h2>

<a href="http://www.riverbankcomputing.com/software/qscintilla/">QScintilla</a>
is a port to Qt of the <a href="http://www.scintilla.org/">Scintilla</a>
editing component.

As well as features found in standard text editing components, Scintilla
includes features especially useful when editing and debugging source code:

<ul>
<li>syntax styling with support for over 70 languages
<li>error indicators
<li>code completion
<li>call tips
<li>code folding
<li>margins can contain markers like those used in debuggers to indicate
    breakpoints and the current line.
<li>recordable macros
<li>multiple views
<li>printing.
</ul>

QScintilla is a port or Scintilla to the Qt GUI toolkit from
<a href="http://www.qtsoftware.com">Nokia</a> and runs on any operating
system supported by Qt (eg. Windows, UNIX/Linux, MacOS/X).  QScintilla works
with both Qt v3 and v4.

This documentation describes QScintilla for Qt
v3.
The QScintilla APIs for Qt v3 and Qt v4 are almost identical.  The main
difference is that the QsciScintillaBase class is derived from a different Qt
class.

QScintilla also includes language bindings for
<a href="http://www.python.org">Python</a>.  These require that
<a href="http://www.riverbankcomputing.com/software/pyqt/">PyQt</a> v3 or v4
is also installed.

This version of QScintilla is based on Scintilla v2.25.


<h2>Licensing</h2>

QScintilla uses a similar license model as Qt and is available under the
<a href="http://www.gnu.org/copyleft/gpl.html">GNU General Public License v2</a>
and a commercial license.

The commercial license allows closed source applications using QScintilla to be
developed and distributed.  At the moment the commercial version of QScintilla
is bundled with the commercial version of
<a href="http://www.riverbankcomputing.co.uk/pyqt/">PyQt</a>.

See the file "LICENSE" to see what license this copy of QScintilla is released
under.

The Scintilla code within QScintilla is released under the following license:

<pre>
 License for Scintilla and SciTE

 Copyright 1998-2003 by Neil Hodgson <neilh@scintilla.org>

 All Rights Reserved

 Permission to use, copy, modify, and distribute this software and its
 documentation for any purpose and without fee is hereby granted,
 provided that the above copyright notice appear in all copies and that
 both that copyright notice and this permission notice appear in
 supporting documentation.

 NEIL HODGSON DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS, IN NO EVENT SHALL NEIL HODGSON BE LIABLE FOR ANY
 SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
 OR PERFORMANCE OF THIS SOFTWARE.
</pre>


<h2>Installation</h2>

As supplied QScintilla will be built as a shared library/DLL and installed in
the same directories as the Qt libraries and include files.

If you want to change the configuration then edit the file
<tt>qscintilla.pro</tt> in the
<tt>Qt3</tt>
directory.  For example, if you want to build a static library, edit the value
of <tt>CONFIG</tt> and replace <tt>dll</tt> with <tt>staticlib</tt>, and edit
the value of <tt>DEFINES</tt> and remove <tt>QSCINTILLA_MAKE_DLL</tt>.

See your <tt>qmake</tt> documentation for more details.

To build and install QScintilla, run:

<pre>
    cd Qt3
    qmake qscintilla.pro
    make
    make install
</pre>

If you have both Qt v3 and v4 installed then make sure you use the correct
version of <tt>qmake</tt>.


<h3>Installation on Windows</h3>

Before compiling QScintilla on Windows you should remove the <tt>Qsci</tt>
directory containing the QScintilla header files from any previous
installation.  This is because the <tt>Makefile</tt> generated by
<tt>qmake</tt> will find these older header files instead of the new ones.

Depending on the compiler you are using you may need to run <tt>nmake</tt>
rather than <tt>make</tt>.

<tt>qmake</tt> on Windows does not support the installation of directory trees
and so you probably need to run:

<pre>
    nmake "COPY_DIR=xcopy /s /q /y /i" install
</pre>

<tt>qmake</tt> on Windows will not install the DLL and so you will probably
also want to run:

<pre>
    copy Qt3\\qscintilla2.dll %%QTDIR%\\bin
</pre>


<h3>Installation on MacOS/X</h3>

On MacOS/X you may need to pass <tt>-spec macx-g++</tt> in order to generate a
Makefile, otherwise an XCode project file may be created.

You will probably also have to set your <tt>DYLD_LIBRARY_PATH</tt> environment
variable to the directory in which the QScintilla library has been installed.
(However, if you are only using QScintilla thought the Python bindings then you
don't need to do this.)


<h2>Example Application</h2>

The example application provided is a port of the standard Qt
<tt>application</tt> example with the QsciScintilla class being used instead of
Qt's QMultiLineEdit class.

The example does not demonstrate all of the extra features of QScintilla.

To build the example, run:

<pre>
    cd example-Qt3
    qmake application.pro
    make
</pre>

On Windows (and depending on the compiler you are using) you may need to run
<tt>nmake</tt> rather than <tt>make</tt>.


<h2>Python Bindings</h2>

The Python bindings are in the <tt>Python</tt> directory.  You must have either
PyQt v3 or v4 already installed.  QScintilla must also already be built and
installed.

The configure, build and install the bindings, run:

<pre>
    python configure.py
    make
    make install
</pre>

On Windows (and depending on the compiler you are using) you may need to run
<tt>nmake</tt> rather than <tt>make</tt>.

By default the bindings will be built for PyQt v4 if it is installed.  If not,
they will be built against PyQt v3.  If you have both installed and want to
build against PyQt v3 then pass <tt>-p 3</tt> as an argument to
<tt>configure.py</tt>.

<tt>configure.py</tt> supports a number of other arguments.  Pass <tt>-h</tt>
to display a list of the supported arguments.


<h2>Qt Designer Plugin</h2>

QScintilla includes an optional plugin for Qt Designer that allows QScintilla
instances to be included in GUI designs just like any other Qt widget.

To build the plugin on all platforms, make sure QScintilla is installed and
then run (as root or administrator):

<pre>
    cd designer-Qt3
    qmake designer.pro
    make
</pre>

On Windows (and depending on the compiler you are using) you may need to run
<tt>nmake</tt> rather than <tt>make</tt>.
*/
